{"ast":null,"code":"'use strict';\n\n/*globals Promise */\nvar JSZipUtils = {};\n// just use the responseText with xhr1, response with xhr2.\n// The transformation doesn't throw away high-order byte (with responseText)\n// because JSZip handles that case. If not used with JSZip, you may need to\n// do it, see https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data\nJSZipUtils._getBinaryFromXHR = function (xhr) {\n  // for xhr.responseText, the 0xFF mask is applied by JSZip\n  return xhr.response || xhr.responseText;\n};\n\n// taken from jQuery\nfunction createStandardXHR() {\n  try {\n    return new window.XMLHttpRequest();\n  } catch (e) {}\n}\nfunction createActiveXHR() {\n  try {\n    return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n  } catch (e) {}\n}\n\n// Create the request object\nvar createXHR = typeof window !== \"undefined\" && window.ActiveXObject ?\n/* Microsoft failed to properly\n * implement the XMLHttpRequest in IE7 (can't request local files),\n * so we use the ActiveXObject when it is available\n * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n * we need a fallback.\n */\nfunction () {\n  return createStandardXHR() || createActiveXHR();\n} :\n// For all other browsers, use the standard XMLHttpRequest object\ncreateStandardXHR;\n\n/**\n * @param  {string} path    The path to the resource to GET.\n * @param  {function|{callback: function, progress: function}} options\n * @return {Promise|undefined} If no callback is passed then a promise is returned\n */\nJSZipUtils.getBinaryContent = function (path, options) {\n  var promise, resolve, reject;\n  var callback;\n  if (!options) {\n    options = {};\n  }\n\n  // backward compatible callback\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  } else if (typeof options.callback === 'function') {\n    // callback inside options object\n    callback = options.callback;\n  }\n  if (!callback && typeof Promise !== \"undefined\") {\n    promise = new Promise(function (_resolve, _reject) {\n      resolve = _resolve;\n      reject = _reject;\n    });\n  } else {\n    resolve = function (data) {\n      callback(null, data);\n    };\n    reject = function (err) {\n      callback(err, null);\n    };\n  }\n\n  /*\n   * Here is the tricky part : getting the data.\n   * In firefox/chrome/opera/... setting the mimeType to 'text/plain; charset=x-user-defined'\n   * is enough, the result is in the standard xhr.responseText.\n   * cf https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Receiving_binary_data_in_older_browsers\n   * In IE <= 9, we must use (the IE only) attribute responseBody\n   * (for binary data, its content is different from responseText).\n   * In IE 10, the 'charset=x-user-defined' trick doesn't work, only the\n   * responseType will work :\n   * http://msdn.microsoft.com/en-us/library/ie/hh673569%28v=vs.85%29.aspx#Binary_Object_upload_and_download\n   *\n   * I'd like to use jQuery to avoid this XHR madness, but it doesn't support\n   * the responseType attribute : http://bugs.jquery.com/ticket/11461\n   */\n  try {\n    var xhr = createXHR();\n    xhr.open('GET', path, true);\n\n    // recent browsers\n    if (\"responseType\" in xhr) {\n      xhr.responseType = \"arraybuffer\";\n    }\n\n    // older browser\n    if (xhr.overrideMimeType) {\n      xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    }\n    xhr.onreadystatechange = function (event) {\n      // use `xhr` and not `this`... thanks IE\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200 || xhr.status === 0) {\n          try {\n            resolve(JSZipUtils._getBinaryFromXHR(xhr));\n          } catch (err) {\n            reject(new Error(err));\n          }\n        } else {\n          reject(new Error(\"Ajax error for \" + path + \" : \" + this.status + \" \" + this.statusText));\n        }\n      }\n    };\n    if (options.progress) {\n      xhr.onprogress = function (e) {\n        options.progress({\n          path: path,\n          originalEvent: e,\n          percent: e.loaded / e.total * 100,\n          loaded: e.loaded,\n          total: e.total\n        });\n      };\n    }\n    xhr.send();\n  } catch (e) {\n    reject(new Error(e), null);\n  }\n\n  // returns a promise or undefined depending on whether a callback was\n  // provided\n  return promise;\n};\n\n// export\nmodule.exports = JSZipUtils;\n\n// enforcing Stuk's coding style\n// vim: set shiftwidth=4 softtabstop=4:","map":{"version":3,"names":["JSZipUtils","_getBinaryFromXHR","xhr","response","responseText","createStandardXHR","window","XMLHttpRequest","e","createActiveXHR","ActiveXObject","createXHR","getBinaryContent","path","options","promise","resolve","reject","callback","Promise","_resolve","_reject","data","err","open","responseType","overrideMimeType","onreadystatechange","event","readyState","status","Error","statusText","progress","onprogress","originalEvent","percent","loaded","total","send","module","exports"],"sources":["F:/PROJETOS/TESTES/entrevistatrab/node_modules/jszip-utils/lib/index.js"],"sourcesContent":["'use strict';\n/*globals Promise */\n\nvar JSZipUtils = {};\n// just use the responseText with xhr1, response with xhr2.\n// The transformation doesn't throw away high-order byte (with responseText)\n// because JSZip handles that case. If not used with JSZip, you may need to\n// do it, see https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data\nJSZipUtils._getBinaryFromXHR = function (xhr) {\n    // for xhr.responseText, the 0xFF mask is applied by JSZip\n    return xhr.response || xhr.responseText;\n};\n\n// taken from jQuery\nfunction createStandardXHR() {\n    try {\n        return new window.XMLHttpRequest();\n    } catch( e ) {}\n}\n\nfunction createActiveXHR() {\n    try {\n        return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch( e ) {}\n}\n\n// Create the request object\nvar createXHR = (typeof window !== \"undefined\" && window.ActiveXObject) ?\n    /* Microsoft failed to properly\n     * implement the XMLHttpRequest in IE7 (can't request local files),\n     * so we use the ActiveXObject when it is available\n     * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n     * we need a fallback.\n     */\n    function() {\n    return createStandardXHR() || createActiveXHR();\n} :\n    // For all other browsers, use the standard XMLHttpRequest object\n    createStandardXHR;\n\n\n/**\n * @param  {string} path    The path to the resource to GET.\n * @param  {function|{callback: function, progress: function}} options\n * @return {Promise|undefined} If no callback is passed then a promise is returned\n */\nJSZipUtils.getBinaryContent = function (path, options) {\n    var promise, resolve, reject;\n    var callback;\n\n    if (!options) {\n        options = {};\n    }\n\n    // backward compatible callback\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    } else if (typeof options.callback === 'function') {\n        // callback inside options object\n        callback = options.callback;\n    }\n\n    if (!callback && typeof Promise !== \"undefined\") {\n        promise = new Promise(function (_resolve, _reject) {\n            resolve = _resolve;\n            reject = _reject;\n        });\n    } else {\n        resolve = function (data) { callback(null, data); };\n        reject = function (err) { callback(err, null); };\n    }\n\n    /*\n     * Here is the tricky part : getting the data.\n     * In firefox/chrome/opera/... setting the mimeType to 'text/plain; charset=x-user-defined'\n     * is enough, the result is in the standard xhr.responseText.\n     * cf https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Receiving_binary_data_in_older_browsers\n     * In IE <= 9, we must use (the IE only) attribute responseBody\n     * (for binary data, its content is different from responseText).\n     * In IE 10, the 'charset=x-user-defined' trick doesn't work, only the\n     * responseType will work :\n     * http://msdn.microsoft.com/en-us/library/ie/hh673569%28v=vs.85%29.aspx#Binary_Object_upload_and_download\n     *\n     * I'd like to use jQuery to avoid this XHR madness, but it doesn't support\n     * the responseType attribute : http://bugs.jquery.com/ticket/11461\n     */\n    try {\n        var xhr = createXHR();\n\n        xhr.open('GET', path, true);\n\n        // recent browsers\n        if (\"responseType\" in xhr) {\n            xhr.responseType = \"arraybuffer\";\n        }\n\n        // older browser\n        if(xhr.overrideMimeType) {\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n        }\n\n        xhr.onreadystatechange = function (event) {\n            // use `xhr` and not `this`... thanks IE\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0) {\n                    try {\n                        resolve(JSZipUtils._getBinaryFromXHR(xhr));\n                    } catch(err) {\n                        reject(new Error(err));\n                    }\n                } else {\n                    reject(new Error(\"Ajax error for \" + path + \" : \" + this.status + \" \" + this.statusText));\n                }\n            }\n        };\n\n        if(options.progress) {\n            xhr.onprogress = function(e) {\n                options.progress({\n                    path: path,\n                    originalEvent: e,\n                    percent: e.loaded / e.total * 100,\n                    loaded: e.loaded,\n                    total: e.total\n                });\n            };\n        }\n\n        xhr.send();\n\n    } catch (e) {\n        reject(new Error(e), null);\n    }\n\n    // returns a promise or undefined depending on whether a callback was\n    // provided\n    return promise;\n};\n\n// export\nmodule.exports = JSZipUtils;\n\n// enforcing Stuk's coding style\n// vim: set shiftwidth=4 softtabstop=4:\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}